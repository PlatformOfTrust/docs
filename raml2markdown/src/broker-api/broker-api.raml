#%RAML 1.0
---
title: Platform Of Trust Data Broker
version: v1
baseUri: https://api-sandbox.oftrust.net
mediaType: application/json
description: |
  The Broker API provides means to connect a service to a translator that will
  return desired data from different sources. The data broker does not mangle
  the data in any way, it only functions as a proxy between services and
  translators.
types:
  data-product-request:
    type: object
    properties:
      timestamp:
        description: A timestamp in RFC3339 format
        type: string
        example: 2018-11-01T12:00:00+00:00
      productCode:
        description: The data product's product code
        type: string
        example: product-1
      parameters:
        description: Additional parameters to be sent to the translator
        type: object
        example: |
          {
            "param-1": "param-1 value",
            "param-2": "param-2 value"
          }
/broker/v1/fetch-data-product:
  description: |
    Use a data product. E.g. request data from the external data source
    connected to the data product.
  post:
    description: |
      Request data from an external service defined by the data product, and
       product code. The data broker will validate the signature of the
       payload and when verified, relay the request to the translator
       registered to the data product. The translator must validate the
       headers and the signature received from the data broker. The
       translator will then translate the
       information fetched from an external source into a standardized format
       that will be returned to the requester.
    headers:
      X-Pot-Signature:
        description: |
          A HMAC-SHA256 signature in base64 encoded format.
          The signature is created from the request payload and the
          app's client secret.<br/><br/>

          Python example: <br/><br/>
          <code>
           body_string = json.dumps( <br/>
            body, <br/>
            sort_keys=True, <br/>
            indent=None, <br/>
            separators=(',', ': ') <br/>
          ).strip() <br/><br/>
          </code>
          The keys MUST be sorted, without indentation and separators comma
          (,) and colon (:) specified. <br/><br/>

          Get the digest by passing the app client secret (generated when
          creating a new app) and the body string to `hmac`:<br/><br/>
          <code>
          digest = <br/>
          hmac.new(client_secret.encode('utf-8'), <br/>
          body_string.encode('utf-8'),<br/>
          hashlib.sha256).digest()<br/><br/>
          </code><br/>
          Return the digest in base64 encoded format:<br/>
          <code>
          X-Pot-Signature = base64.b64encode(digest).decode()<br/>
          </code>

        type: string
        example: Ioma1gqOVFUBrXiziWS....CLqBG4vFozG3YgzPzillNip0=
      X-App-Token:
        description: |
          The requesting app's JWT token. The token is generated when the
          app is created.
        type: string
        example: eyJ0eXAiOiJJV1QiLcJhbgciOiJSUzI1NiJ9.eyJzY29w...VXs5fff
      X-User-Token?:
        description: |
          The currently logged in user's OAuth bearer token.
        type: string
        example: eyJ0eXAIOijKV1QiLcJGbGciOiJSUzI1NiJ9.eyJzY29w...DVs5aaf
    body:
      type: data-product-request
      example: |
        {
          "timestamp": "2018-11-01T12:00:00+00:00",
          "productCode": "product-1",
          "parameters": {
            "param-1": "Value",
            "param-2": "Value"
          }
        }
    responses:
      200:
        body:
          example: |
            {
              "@context": "<context url>",
              "data": {
                <response from translator>
              },
              "signature": {
                "type": "<signature type>",
                "created": "<RFC3339>",
                "creator": "<public key URL>",
                "signatureValue": "..."
              }
            }
      422:
        body:
          example: |
            {
              "error": {
                "status": 422,
                "message": {
                  "mandatoryParameter": [
                    "Missing data for required field."
                  ]
                }
              }
            }
