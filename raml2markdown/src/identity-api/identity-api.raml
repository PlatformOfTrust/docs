#%RAML 1.0
---
title: Identity
version: v1
baseUri: https://api-sandbox.oftrust.net
mediaType: application/json
description: |
  The Identity API provides means to create, update and delete digital twins
  (identities) and manage links between them.
  The links provides the direction and type (sometimes called role) of the link.
types:
  identity:
    type: object
    properties:
      context:
        description: The URL to the context for this identity
      type:
        description: The type of the identity
        type: string
      data:
        description: Additional data for the identity, as defined in the context.
        type: object
        properties:
          name:
            description: The name of the identity
            type: string
  link:
    type: object
    properties:
      context:
        description: The URL to the context for this link
        type: string
      type:
        description: The type of the link
        type: string
      data?:
        description: Additional key-value data for the link.
        type: object
/identities/v1:
  description: |
    Create a new identity.
  post:
    description: Create a new identity
    headers:
      Authorization: !include ../authorization-headers.yaml
    body:
      type: identity
      example: !include includes/examples/identity-create.json
    responses:
      201:
        body:
          properties: !include includes/properties/identity.yaml
          example: !include includes/examples/identity-without-links.json
      401:
        body:
          example: !include includes/examples/unauthorized-401.json
      422:
        body:
          example: |
            {
              "error": {
                "status": 422,
                "message": "Could not create identity."
              }
            }
  /{id}:
    description: Read, update and delete identities.
    uriParameters:
      id:
        description: The ID of the Identity
        type: string
        example: 2584bdd7-1cb2-48ed-a106-2a1b817cf909
    get:
      queryParameters:
        inLinks?:
          description: |
            Whether to return the inbound links or not. 1=return, 0=do not
            return. Defaults to 1.
          type: integer
          example: /identities/{version}/{id}?inLinks=0
        outLinks?:
          description: |
            Whether to return the outbound links or not. 1=return, 0=do not
            return. Defaults to 1.
          type: integer
          example: /identities/{version}/{id}?outLinks=0
        paginate?:
          description: |
            Which links to paginate. "inLinks" or "outLinks" or both
            "inLinks,outLinks". Defaults to "inLinks,outLinks" meaning that
            both link directions will be paginated.
          type: string
          example: /identities/{version}/{id}?paginate=inLinks
        limit?:
          description: |
            The amount of in- and out links to return in the response. E.g. 10, will
            return 10 in- and out links. Defaults to 100. This value must be between 1
            and 1000.
          type: integer
          example: /identities/{version}/{id}?limit=10
        offset?:
          description: |
            The offset how many in- and out links to skip. E.g. 10 will
            skip the first 10 links. Defaults to 0.
          type: integer
          example: /identities/{version}/{id}?offset=0
      description: |
        Read one identity by id. Requires the `read` permission on the
        identity. If you need to list all the links, and paginate through
        them, we suggest to use the "List links" endpoint for an identity.
      headers:
        Authorization: !include ../authorization-headers.yaml
      responses:
        200:
          body:
            properties: !include includes/properties/identity.yaml
            example: !include includes/examples/identity.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            examples:
              'Negative offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must be at least 0."
                      ]
                    }
                  }
                }
              'Higher offset than total count': |
                {
                  "error": {
                    "status": 422,
                    "message": "Offset cannot be greater than the total count of records."
                  }
                }
    put:
      description: |
        Update an identity by id. Requires the `write` permission on the
        identity.
      headers:
        Authorization: !include ../authorization-headers.yaml
      body:
        type: identity
        example: !include includes/examples/identity-update.json
      responses:
        200:
          body:
            properties: !include includes/properties/identity.yaml
            example: !include includes/examples/identity.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        403:
          body:
            example: !include includes/examples/acl-permission-denied-403.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            example: |
              {
                "error": {
                  "status": 422,
                  "message": "Could not update identity."
                }
              }
    delete:
      description: |
        Delete an identity by id. Requires the `manage` permission on the
        identity.
      headers:
        Authorization: !include ../authorization-headers.yaml
      responses:
        204:
          body:
            example: {}
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        403:
          body:
            example: !include includes/examples/acl-permission-denied-403.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            examples:
              "Restricted identity type": |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not delete identity. Try using corresponding APIs to delete this type of identities."
                  }
                }
              "Links exists": |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not delete identity, reason: links exist to or from the identity."
                  }
                }
  /{from_identity}/link/{to_identity}:
    description: Manage links between "from"- and "to"-identities.
    uriParameters:
      from_identity:
        description: The starting identity ID of the link
        type: string
        example: 8d8b1ea6-52b7-4bbc-89b0-f7604422dffd
      to_identity:
        description: The ending identity ID of the link
        type: string
        example: a2a161c9-a7ff-47e7-9b70-4bf4a83bcb90
    post:
      description: Creates a new link between two identities
      headers:
        Authorization: !include ../authorization-headers.yaml
      body:
        type: link
        example: !include includes/examples/link-create.json
      responses:
        201:
          body:
            properties: !include includes/properties/link.yaml
            example: !include includes/examples/link.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        403:
          body:
            example: !include includes/examples/acl-permission-denied-403.json
        404:
          body:
            examples:
              'From identity not found': |
                {
                  "error": {
                    "status": 404,
                    "message": "From identity not found."
                  }
                }
              'To identity not found': |
                {
                  "error": {
                    "status": 404,
                    "message": "To identity not found."
                  }
                }
        409:
          body:
            example: |
              {
                "error": {
                  "status": 409,
                  "message": "Could not create link. Does a link of type MemberOf already exist from 59de4a29-944e-4141-a6c9-f5d7bb7707b0 to 7a13c5f6-cf8b-4d18-9f8a-9b884bc6e817?"
                }
              }
        422:
          body:
            example: |
              {
                "error": {
                  "status": 422,
                  "message": "Could not create link."
                }
              }
    /{type}:
      description: |
        Read, update and delete a link of a specific type between the "from"- and "to"-identities.
      uriParameters:
        type:
          description: The `@type` of the link, for example `Link`, `Tenant` or `Owner`
          type: string
          example: Owner
      get:
        description: Read a link by type
        headers:
          Authorization: !include ../authorization-headers.yaml
        responses:
          200:
            body:
              properties: !include includes/properties/link.yaml
              example: !include includes/examples/link.json
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          404:
            body:
              example: !include includes/examples/link-not-found.json
      put:
        description: Update a link
        headers:
          Authorization: !include ../authorization-headers.yaml
        body:
          example: |
            {
              "context": "https://example.com/contexts/type.jsonld",
              "type": "Owner"
            }
        responses:
          201:
            body:
              properties: !include includes/properties/link.yaml
              example: !include includes/examples/link.json
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          403:
            body:
              example: !include includes/examples/acl-permission-denied-403.json
          404:
            body:
              examples:
                'From identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "From identity not found."
                    }
                  }
                'To identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "To identity not found."
                    }
                  }
                'Link not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Link of type <type> not found."
                    }
                  }
          422:
            body:
              example: |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not update link."
                  }
                }
      delete:
        description: Delete a link by type
        headers:
          Authorization: !include ../authorization-headers.yaml
        responses:
          204:
            body:
              example: {}
          401:
            body:
              example: !include includes/examples/unauthorized-401.json
          403:
            body:
              example: !include includes/examples/acl-permission-denied-403.json
          404:
            body:
              examples:
                'From identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "From identity not found."
                    }
                  }
                'To identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "To identity not found."
                    }
                  }
                'Link not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Link of type <type> not found."
                    }
                  }
                'ACL not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Not Found: ACL for identity '<id>' not found."
                    }
                  }
          422:
            body:
              example: |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not delete link."
                  }
                }

  /{id}/links:
    description: |
      List links. If the optional `type` GET-parameter is given, only list
      links by that type. Returns a paginated result of the inbound and
      outbound links to/from the given identity. Please note that the
      pagination offset and limit applies to both directions of the links.
    uriParameters:
      id:
        description: The ID of the identity
        type: string
        example: a2a161c9-a7ff-47e7-9b70-4bf4a83bcb90
    get:
      queryParameters:
        type?:
          description: |
            If given to `GET /identities/{version}/{id}/links?type=OwnerOf`,
            will list only the links of `@type: "OwnerOf"`.
          type: string
          example: /identities/{version}/{id}/links?type=Owner
        limit?:
          description: |
            The amount of records to return in the response. E.g. 10, will
            return 10 records. Defaults to 100. This value must be between 1
            and 1000.
          type: integer
          example: /identities/{version}/{id}/links?limit=10
        offset?:
          description: |
            The offset how many records to skip. E.g. 10 will
            skip the first 10 records. Defaults to 0.
          type: integer
          example: /identities/{version}/{id}/links?offset=0
      description: List all inbound and outbound links for a given identity.
      headers:
        Authorization: !include ../authorization-headers.yaml
      responses:
        200:
          body:
            properties: !include includes/properties/links.yaml
            example: !include includes/examples/links.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            examples:
              'Negative offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must be at least 0."
                      ]
                    }
                  }
                }
              'Higher offset than total count': |
                {
                  "error": {
                    "status": 422,
                    "message": "Offset cannot be greater than the total count of records."
                  }
                }
  /discovery:
    description: |
      Identity discovery. Use this endpoint to traverse the identity network
       to find identities by their context. E.g. to find all Temperature
       Sensors in a building, start from the building, traverse inbound links
       with context `https://standards.oftrust.net/v1/Context/Link/BelongsTo/`
       and find the identities with the context
       `https://standards.oftrust.net/v1/Context/Identity/Device/Sensor/TemperatureSensor/`.
       This will produce a result of all the Temperature sensors linked to the
       building.
       To run a hierarchical discovery, just modify the path of the identity
       context, e.g. to find all types of sensors (temperature, carbondioxide)
       use the context `https://standards.oftrust.net/v1/Context/Identity/Device/Sensor/`.
       This will list all Sensors with the type `CarbondioxideSensor` and
       `TemperatureSensor`.
       NOTE: Requires the `read` permission on the `fromId` identity.
    get:
      queryParameters:
        fromId:
          description: The starting identity to traverse from, e.g. the Building ID.
          type: string
          example: fc3bced4-a132-4293-9240-4d0f02277e2e
        linkContext:
          description: |
            The link context to traverse (the ending forward slash / is optional).
          type: string
          example: https://standards.oftrust.net/v1/Context/Link/BelongsTo/
        identityContext:
          description: |
            The identity context to search for. The context MUST end with a
            forward slash /.
          type: string
          example: https://standards.oftrust.net/v1/Context/Identity/Device/Sensor/
        linkDirection:
          description: |
            The direction to traverse from the building, one of "IN" or "OUT".
            When using "IN" it means that the `BelongsTo` links are
            incoming links towards the Building:
            (Building) <-- BelongsTo -- (Storey)
            When using "OUT" it means that the `BelongsTo` links are
            outgoing from the Building (please note that this is just an
            example, the data model for buildings and storeys are IN):
            (Building) -- BelongsTo --> (Storey)
          type: string
          example: IN
        maxDepth:
          description: |
            The traversal max depth. This means that e.g. maxDepth=3 does
            three link hops in the traversal:
            (Building) <-- BelongsTo -- (Storey) <-- BelongsTo -- (Room) <-- BelongsTo -- (Sensor)
            If searching for `Sensors` but given maxDepth of 2, nothing will
            be returned since there are 3 links between the building and
            sensors. This value must be between 1 and 5, but defaults to 2.
          type: integer
          example: 2
        offset:
          description: |
            The offset used for pagination. Defaults to 0, meaning starting
            from the first record. Given an offset of 10 means that the next
            10 records are returned.
          type: integer
          example: 10
        limit:
          description: |
            How many records to return, used for pagination. Defaults to 20
            records. Given a limit of 100 will return 100 records. This value
            must be between 1 and 1000.
          type: integer
          example: 20
      description: Discover identities in the identity network.
      headers:
        Authorization: !include ../authorization-headers.yaml
      responses:
        200:
          body:
            properties:
              identities:
                description: |
                  An object containing the discovered identities. The object is
                  keyed by the identity ID.
                type: object
                example: |
                  {
                    "identities": {
                      "eccbcc62-37e2-4014-8233-d077fce7bac9": {
                        "@context": "https://standards.oftrust.net/v1/Context/Identity/Device/Sensor/TemperatureSensor/",
                        "@type": "TemperatureSensor",
                        "@id": "eccbcc62-37e2-4014-8233-d077fce7bac9",
                        "data": {
                          "name": "Temperature sensor",
                          "codeLocal": "local code"
                        },
                        "metadata": {
                          "createdAt": "2019-09-17T12:53:25+00:00",
                          "createdBy": "f773dafe-20c0-4a25-aa3e-9da0b81b9304",
                          "updatedAt": "2019-09-17T12:53:25+00:00",
                          "updatedBy": "f773dafe-20c0-4a25-aa3e-9da0b81b9304"
                        }
                      }
                    }
                  }
              pagination:
                description: |
                  The pagination object. The object contains information
                  about the pagination, links, total count of records and if
                  there are more records to fetch.
                type: object
                example: |
                  {
                    "pagination": {
                      "links": [
                        {
                          "rel": "first",
                          "href": "https://api-sandbox.oftrust.net/identities/v1/discovery?offset=0&limit=1&fromId=fc3bced4-a132-4293-9240-4d0f02277e2e&linkContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FLink%2FBelongsTo%2F&identityContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FIdentity%2FDevice%2FSensor%2F&linkDirection=IN&maxDepth=3"
                        },
                        {
                          "rel": "self",
                          "href": "https://api-sandbox.oftrust.net/identities/v1/discovery?fromId=fc3bced4-a132-4293-9240-4d0f02277e2e&linkContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FLink%2FBelongsTo%2F&identityContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FIdentity%2FDevice%2FSensor%2F&linkDirection=IN&maxDepth=3&offset=0&limit=1"
                        },
                        {
                          "rel": "last",
                          "href": "https://api-sandbox.oftrust.net/identities/v1/discovery?offset=173&limit=1&fromId=fc3bced4-a132-4293-9240-4d0f02277e2e&linkContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FLink%2FBelongsTo%2F&identityContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FIdentity%2FDevice%2FSensor%2F&linkDirection=IN&maxDepth=3"
                        },
                        {
                          "rel": "next",
                          "href": "https://api-sandbox.oftrust.net/identities/v1/discovery?offset=1&limit=1&fromId=fc3bced4-a132-4293-9240-4d0f02277e2e&linkContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FLink%2FBelongsTo%2F&identityContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FIdentity%2FDevice%2FSensor%2F&linkDirection=IN&maxDepth=3"
                        }
                      ],
                      "hasMore": true,
                      "totalCount": 174
                    }
                  }
            example: !include includes/examples/identity-discovery.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            examples:
              'Invalid link direction': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "linkDirection": [
                        "Not a valid choice, must be one of 'IN', 'OUT'"
                      ]
                    }
                  }
                }
              'Invalid min offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must be at least 0."
                      ]
                    }
                  }
                }
              'Invalid max offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must not be greater than or equal to total count: {total_count}"
                      ]
                    }
                  }
                }
              'Invalid max depth': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "maxDepth": [
                        "Must be between 1 and 5."
                      ]
                    }
                  }
                }
              'Invalid limit': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "limit": [
                        "Must be between 1 and 1000."
                      ]
                    }
                  }
                }
                422:
              'Negative offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must be at least 0."
                      ]
                    }
                  }
                }
              'Higher offset than total count': |
                {
                  "error": {
                    "status": 422,
                    "message": "Offset cannot be greater than the total count of records."
                  }
                }
        500:
          body:
            example: |
              {
                "error": {
                  "status": 500,
                  "message": "Could not run discovery."
                }
              }
  /dataDiscovery:
    description: |
      Data product discovery. Use this endpoint to traverse the identity network
      to find data products. E.g. to find all data products
      connected to Temperature Sensors in a building, start from the
      building, traverse inbound links with context
      `https://standards.oftrust.net/v1/Context/Link/BelongsTo/`
      and find the identities with the context
      `https://standards.oftrust.net/v1/Context/Identity/Device/Sensor/TemperatureSensor/`.
      This will produce a result of all the data products Temperature
      sensors are linked to, including the data product code, list of sensor
      IDs and their respective "external IDs".
      To run a hierarchical discovery, just modify the path of the identity
      context, e.g. to find data products for all types of sensors
      (temperature, carbondioxide, and any other defined types)
      use the context `https://standards.oftrust.net/v1/Context/Identity/Device/Sensor/`.
      This will list all data products where sensors with the type
      `CarbondioxideSensor` and `TemperatureSensor` are connected to.
    get:
      queryParameters:
        fromId:
          description: The starting identity to traverse from, e.g. the Building ID.
          type: string
          example: fc3bced4-a132-4293-9240-4d0f02277e2e
        linkContext:
          description: |
            The link context to traverse. The context MUST end with a forward
            slash /.
          type: string
          example: https://standards.oftrust.net/v1/Context/Link/BelongsTo/
        identityContext:
          description: |
            The identity context to search for. The context MUST end with a
            forward slash /.
          type: string
          example: https://standards.oftrust.net/v1/Context/Identity/Device/Sensor/
        linkDirection:
          description: |
            The direction to traverse from the building, one of "IN" or "OUT".
            When using "IN" it means that the `BelongsTo` links are
            incoming links towards the Building:
            (Building) <-- BelongsTo -- (Storey)
            When using "OUT" it means that the `BelongsTo` links are
            outgoing from the Building (please note that this is just an
            example, the data model for buildings and storeys are IN):
            (Building) -- BelongsTo --> (Storey)
          type: string
          example: IN
        maxDepth:
          description: |
            The traversal max depth. This means that e.g. maxDepth=3 does
            three link hops in the traversal:
            (Building) <-- BelongsTo -- (Storey) <-- BelongsTo -- (Room) <-- BelongsTo -- (Sensor)
            If searching for `Sensors` but given maxDepth of 2, nothing will
            be returned since there are 3 links between the building and
            sensors. This value must be between 1 and 5, but defaults to 2.
          type: integer
          example: 2
        offset:
          description: |
            The offset used for pagination. Defaults to 0, meaning starting
            from the first record. Given an offset of 10 means that the next
            10 records are returned.
          type: integer
          example: 10
        limit:
          description: |
            How many records to return, used for pagination. Defaults to 20
            records. Given a limit of 100 will return 100 records. This value
            must be between 1 and 1000.
          type: integer
          example: 20
      description: Discover data products in the identity network.
      headers:
        Authorization: !include ../authorization-headers.yaml
        X-Platform-Token:
          description: The Platform token.
          type: string
          example: eyJ0eXAi...CJhbGciOiJSUzI1NiJ9.eyJzY...sSnVg6dfGuMKaoY9sA
      responses:
        200:
          body:
            properties:
              dataProducts:
                description: |
                  An object containing the data products. The object is
                  keyed by the data product product code, and that in turn
                  is an object containing the sensor identity ID as the key
                  and the value is an object containing the link data, such as
                  the external ID for the external system.
                type: object
                example: |
                  {
                    "dataProducts": {
                      "data-product-product-code": {
                        "eccbcc62-37e2-4014-8233-d077fce7bac9": "sensor id 1",
                        "958f5881-ee48-4a5a-a6ed-bad100ec72ac": "sensor id 2"
                      }
                    }
                  }
              pagination:
                description: |
                  The pagination object. The object contains information
                  about the pagination, links, total count of records and if
                   there are more records to fetch.
                type: object
                example: |
                  {
                    "pagination": {
                      "links": [
                        {
                          "rel": "first",
                          "href": "https://api-sandbox.oftrust.net/identities/v1/dataDiscovery?offset=0&limit=10&fromId=fc3bced4-a132-4293-9240-4d0f02277e2e&linkContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FLink%2FBelongsTo%2F&identityContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FIdentity%2FDevice%2FSensor%2F&linkDirection=IN&maxDepth=3"
                        },
                        {
                          "rel": "self",
                          "href": "https://api-sandbox.oftrust.net/identities/v1/dataDiscovery?fromId=fc3bced4-a132-4293-9240-4d0f02277e2e&linkContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FLink%2FBelongsTo%2F&identityContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FIdentity%2FDevice%2FSensor%2F&linkDirection=IN&maxDepth=3&offset=0&limit=10"
                        },
                        {
                          "rel": "last",
                          "href": "https://api-sandbox.oftrust.net/identities/v1/dataDiscovery?offset=0&limit=10&fromId=fc3bced4-a132-4293-9240-4d0f02277e2e&linkContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FLink%2FBelongsTo%2F&identityContext=https%3A%2F%2Fstandards.oftrust.net%2Fv1%2FContext%2FIdentity%2FDevice%2FSensor%2F&linkDirection=IN&maxDepth=3"
                        }
                      ],
                      "hasMore": false,
                      "totalCount": 4
                    }
                  }
            example: !include includes/examples/data-product-discovery.json
        401:
          body:
            example: !include includes/examples/unauthorized-401.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            examples:
              'Invalid link direction': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "linkDirection": [
                        "Not a valid choice, must be one of 'IN', 'OUT'"
                      ]
                    }
                  }
                }
              'Invalid min offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must be at least 0."
                      ]
                    }
                  }
                }
              'Invalid max offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must not be greater than or equal to total count: {total_count}"
                      ]
                    }
                  }
                }
              'Invalid max depth': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "maxDepth": [
                        "Must be between 1 and 5."
                      ]
                    }
                  }
                }
              'Invalid limit': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "limit": [
                        "Must be between 1 and 1000."
                      ]
                    }
                  }
                }
              'Negative offset': |
                {
                  "error": {
                    "status": 422,
                    "message": {
                      "offset": [
                        "Must be at least 0."
                      ]
                    }
                  }
                }
              'Higher offset than total count': |
                {
                  "error": {
                    "status": 422,
                    "message": "Offset cannot be greater than the total count of records."
                  }
                }
        500:
          body:
            example: |
              {
                "error": {
                  "status": 500,
                  "message": "Could not run discovery."
                }
              }
