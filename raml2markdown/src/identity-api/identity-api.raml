#%RAML 1.0
---
title: Identity
version: v1
baseUri: https://api-sandbox.oftrust.net
mediaType: application/json
description: |
  The Identity API provides means to create, update and delete digital twins
  (identities) and manage links between them.
  The links provides the direction and type (sometimes called role) of the link.
types:
  identity:
    type: object
    properties:
      context:
        description: The URL to the context for this identity
      name:
        description: The name of the identity
        type: string
      type:
        description: The type of the identity
        type: string
      data?:
        description: Optional key-value data for the identity
        type: object
      createdBy?:
        description: Optional User ID who should be the creator of this identity
        type: string
  link:
    type: object
    properties:
      context:
        description: The URL to the context for this link
        type: string
      type:
        description: The type of the link
        type: string
/identities/v1:
  description: |
    Create a new or list identities. If optional `type` GET-parameter is given,
    lists only identities of the defined type.
  post:
    description: Create a new identity
    headers:
      Authorization: !include ../authorization-headers.yaml
    body:
      type: identity
      example: !include includes/examples/identity-create.json
    responses:
      201:
        body:
          properties: !include includes/properties/identity.yaml
          example: !include includes/examples/identity-without-links.json
      422:
        body:
          example: |
            {
              "error": {
                "status": 422,
                "message": "Could not create identity."
              }
            }
  get:
    queryParameters:
      type?:
        description: |
          If given to `GET /identities/{version}?type=App`, will list only the
          identities of `@type: "App"`
        type: string
        example: /identities/{version}?type=App
    description: List all identities created by currently logged in user
    headers:
      Authorization: !include ../authorization-headers.yaml
    responses:
      200:
        body:
          properties: !include includes/properties/identities.yaml
          example: !include includes/examples/identities.json

  /{id}:
    description: Read, update and delete identities.
    uriParameters:
      id:
        description: The ID of the Identity
        type: string
        example: 2584bdd7-1cb2-48ed-a106-2a1b817cf909
    get:
      description: Read one identity by id
      headers:
        Authorization: !include ../authorization-headers.yaml
      responses:
        200:
          body:
            properties: !include includes/properties/identity.yaml
            example: !include includes/examples/identity.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
    put:
      description: Update an identity by id
      headers:
        Authorization: !include ../authorization-headers.yaml
      body:
        type: identity
        example: !include includes/examples/identity-update.json
      responses:
        200:
          body:
            properties: !include includes/properties/identity.yaml
            example: !include includes/examples/identity.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
        422:
          body:
            example: |
              {
                "error": {
                  "status": 422,
                  "message": "Could not update identity."
                }
              }
    delete:
      description: Delete an identity by id
      headers:
        Authorization: !include ../authorization-headers.yaml
      responses:
        204:
          body:
            example: {}
        404:
          body:
            example: !include includes/examples/identity-not-found.json
  /{from_identity}/link/{to_identity}:
    description: Manage links between "from"- and "to"-identities.
    uriParameters:
      from_identity:
        description: The starting identity ID of the link
        type: string
        example: 8d8b1ea6-52b7-4bbc-89b0-f7604422dffd
      to_identity:
        description: The ending identity ID of the link
        type: string
        example: a2a161c9-a7ff-47e7-9b70-4bf4a83bcb90
    post:
      description: Creates a new link between two identities
      headers:
        Authorization: !include ../authorization-headers.yaml
      body:
        type: link
        example: !include includes/examples/link-create.json
      responses:
        201:
          body:
            properties: !include includes/properties/link.yaml
            example: !include includes/examples/link.json
        404:
          body:
            examples:
              'From identity not found': |
                {
                  "error": {
                    "status": 404,
                    "message": "From identity not found."
                  }
                }
              'To identity not found': |
                {
                  "error": {
                    "status": 404,
                    "message": "To identity not found."
                  }
                }
        422:
          body:
            example: |
              {
                "error": {
                  "status": 422,
                  "message": "Could not create link."
                }
              }
    /{type}:
      description: |
        Read, update and delete a link of a specific type between the "from"- and "to"-identities.
      uriParameters:
        type:
          description: The `@type` of the link, for example `Link`, `Tenant` or `Owner`
          type: string
          example: Owner
      get:
        description: Read a link by type
        headers:
          Authorization: !include ../authorization-headers.yaml
        responses:
          200:
            body:
              properties: !include includes/properties/link.yaml
              example: !include includes/examples/link.json
          404:
            body:
              example: !include includes/examples/link-not-found.json
      put:
        description: Update a link
        headers:
          Authorization: !include ../authorization-headers.yaml
        body:
          example: |
            {
              "context": "https://example.com/contexts/type.jsonld",
              "type": "Owner"
            }
        responses:
          201:
            body:
              properties: !include includes/properties/link.yaml
              example: !include includes/examples/link.json
          404:
            body:
              examples:
                'From identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "From identity not found."
                    }
                  }
                'To identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "To identity not found."
                    }
                  }
                'Link not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Link of type <type> not found."
                    }
                  }
          422:
            body:
              example: |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not update link."
                  }
                }
      delete:
        description: Delete a link by type
        headers:
          Authorization: !include ../authorization-headers.yaml
        responses:
          204:
            body:
              example: {}
          404:
            body:
              examples:
                'From identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "From identity not found."
                    }
                  }
                'To identity not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "To identity not found."
                    }
                  }
                'Link not found': |
                  {
                    "error": {
                      "status": 404,
                      "message": "Link of type <type> not found."
                    }
                  }
          422:
            body:
              example: |
                {
                  "error": {
                    "status": 422,
                    "message": "Could not delete link."
                  }
                }

  /{id}/links:
    description: |
      List links. If the optional `type` GET-parameter is given, only list
      links by that type.
    uriParameters:
      id:
        description: The ID of the identity
        type: string
        example: a2a161c9-a7ff-47e7-9b70-4bf4a83bcb90
    get:
      queryParameters:
        type?:
          description: |
            If given to `GET /identities/{version}/{id}/links?type=Owner`, will list only the
            links of `@type: "Owner"`
          type: string
          example: /identities/{version}/{id}/links?type=Owner
      description: List all links for a given identity
      headers:
        Authorization: !include ../authorization-headers.yaml
      responses:
        200:
          body:
            properties: !include includes/properties/links.yaml
            example: !include includes/examples/links.json
        404:
          body:
            example: !include includes/examples/identity-not-found.json
